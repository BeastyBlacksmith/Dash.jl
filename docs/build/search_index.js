var documenterSearchIndex = {"docs":
[{"location":"api/#Dashboards.jl-API-1","page":"API Docs","title":"Dashboards.jl API","text":"","category":"section"},{"location":"api/#","page":"API Docs","title":"API Docs","text":"","category":"page"},{"location":"api/#","page":"API Docs","title":"API Docs","text":"Modules = [Dashboards]","category":"page"},{"location":"api/#Dashboards.Dashboards","page":"API Docs","title":"Dashboards.Dashboards","text":"module Dashboards\n\nJulia backend for Plotly Dash\n\nExamples\n\nimport HTTP\nusing Dashboards\napp = Dash(\"Test\", external_stylesheets=[\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        dcc_input(id=\"graphTitle\", value=\"Let's Dance!\", type = \"text\"),\n        html_div(id=\"outputID\"),            \n        dcc_graph(id=\"graph\",\n            figure = (\n                data = [(x = [1,2,3], y = [3,2,8], type=\"bar\")],\n                layout = Dict(:title => \"Graph\")\n            )\n        )\n                \n    end\nend\ncallback!(app, callid\"{graphTitle.type} graphTitle.value => outputID.children\") do type, value\n    \"You've entered: '$(value)' into a '$(type)' input control\"\nend\ncallback!(app, callid\"graphTitle.value => graph.figure\") do value\n    (\n        data = [\n            (x = [1,2,3], y = abs.(randn(3)), type=\"bar\"),\n            (x = [1,2,3], y = abs.(randn(3)), type=\"scatter\", mode = \"lines+markers\", line = (width = 4,))                \n        ],\n        layout = (title = value,)\n    )\nend\nhandle = make_handler(app, debug = true)\nHTTP.serve(handle, HTTP.Sockets.localhost, 8080)\n\nAvailable components\n\nComponent package: dcc:\n\ndcc_checklist, dcc_confirmdialog, dcc_confirmdialogprovider, dcc_datepickerrange, dcc_datepickersingle, dcc_dropdown, dcc_graph, dcc_input, dcc_interval, dcc_link, dcc_loading, dcc_location, dcc_logoutbutton, dcc_markdown, dcc_radioitems, dcc_rangeslider, dcc_slider, dcc_store, dcc_tab, dcc_tabs, dcc_textarea, dcc_upload\n\nComponent package: html:\n\nhtml_a, html_abbr, html_acronym, html_address, html_area, html_article, html_aside, html_audio, html_b, html_base, html_basefont, html_bdi, html_bdo, html_big, html_blink, html_blockquote, html_br, html_button, html_canvas, html_caption, html_center, html_cite, html_code, html_col, html_colgroup, html_command, html_content, html_data, html_datalist, html_dd, html_del, html_details, html_dfn, html_dialog, html_div, html_dl, html_dt, html_element, html_em, html_embed, html_fieldset, html_figcaption, html_figure, html_font, html_footer, html_form, html_frame, html_frameset, html_h1, html_h2, html_h3, html_h4, html_h5, html_h6, html_header, html_hgroup, html_hr, html_i, html_iframe, html_img, html_ins, html_isindex, html_kbd, html_keygen, html_label, html_legend, html_li, html_link, html_listing, html_main, html_mapel, html_mark, html_marquee, html_meta, html_meter, html_multicol, html_nav, html_nextid, html_nobr, html_noscript, html_objectel, html_ol, html_optgroup, html_option, html_output, html_p, html_param, html_picture, html_plaintext, html_pre, html_progress, html_q, html_rb, html_rp, html_rt, html_rtc, html_ruby, html_s, html_samp, html_script, html_section, html_select, html_shadow, html_slot, html_small, html_source, html_spacer, html_span, html_strike, html_strong, html_sub, html_summary, html_sup, html_table, html_tbody, html_td, html_template, html_textarea, html_tfoot, html_th, html_thead, html_time, html_title, html_tr, html_track, html_u, html_ul, html_var, html_video, html_wbr, html_xmp\n\n\n\n\n\n","category":"module"},{"location":"api/#Dashboards.Dash","page":"API Docs","title":"Dashboards.Dash","text":"struct Dash <: Any\n\nRepresentation of Dash application\n\n\n\n\n\n","category":"type"},{"location":"api/#Dashboards.Dash-Tuple{Function,String}","page":"API Docs","title":"Dashboards.Dash","text":"Dash(layout_maker::Function, name::String; external_stylesheets ::Vector{String} = Vector{String}(), url_base_pathname::String=\"/\")::Dash\n\nConstruct a Dash app using callback for layout creation\n\nArguments\n\nlayout_maker::Function - function for layout creation. Must has signature ()::Component\nname::String - Dashboard name\nexternal_stylesheets::Vector{String} = Vector{String}() - vector of external css urls \nurl_base_pathname::String=\"/\" - base url path for dashboard, default \"/\" \nassets_folder::String - a path, relative to the current working directory,\n\nfor extra files to be used in the browser. Default \"assets\"\n\nExamples\n\njulia> app = Dash(\"Test\") do\n    html_div() do\n        html_h1(\"Test Dashboard\")\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"api/#Dashboards.callback!-Tuple{Function,Dash,CallbackId}","page":"API Docs","title":"Dashboards.callback!","text":"callback!(func::Function, app::Dash, id::CallbackId)\n\nCreate a callback that updates the output by calling function func.\n\n#Examples\n\napp = Dash(\"Test\") do\n    html_div() do\n        dcc_input(id=\"graphTitle\", value=\"Let's Dance!\", type = \"text\"),\n        html_div(id=\"outputID\"),\n        html_div(id=\"outputID2\")\n\n    end\nend\ncallback!(app, CallbackId(\n    state = [(:graphTitle, :type)],\n    input = [(:graphTitle, :value)],\n    output = [(:outputID, :children), (:outputID2, :children)]\n    )\n    ) do stateType, inputValue\n    return (stateType * \"...\" * inputValue, inputValue)\nend\n\nYou can use macro callid string macro for make CallbackId : \n\ncallback!(app, callid\"{graphTitle.type} graphTitle.value => outputID.children, outputID2.children\") do stateType, inputValue\n\n    return (stateType * \"...\" * inputValue, inputValue)\nend\n\n\n\n\n\n","category":"method"},{"location":"api/#Dashboards.dcc_checklist","page":"API Docs","title":"Dashboards.dcc_checklist","text":"dcc_checklist(;kwags...)\n\nChecklist is a component that encapsulates several checkboxes. The values and labels of the checklist are specified in the options property and the checked items are specified with the value property. Each checkbox is rendered as an input with a surrounding label.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\noptions - An array of options\nvalue - The currently selected value\nclassName - The class of the container (div)\nstyle - The style of the container (div)\ninputStyle - The style of the <input> checkbox element\ninputClassName - The class of the <input> checkbox element\nlabelStyle - The style of the <label> that wraps the checkbox input\n\nand the option's label\n\nlabelClassName - The class of the <label> that wraps the checkbox input\n\nand the option's label\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_confirmdialog","page":"API Docs","title":"Dashboards.dcc_confirmdialog","text":"dcc_confirmdialog(;kwags...)\n\nConfirmDialog is used to display the browser's native \"confirm\" modal, with an optional message and two buttons (\"OK\" and \"Cancel\"). This ConfirmDialog can be used in conjunction with buttons when the user is performing an action that should require an extra step of verification.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nmessage - Message to show in the popup.\nsubmit_n_clicks - Number of times the submit button was clicked\nsubmit_n_clicks_timestamp - Last time the submit button was clicked.\ncancel_n_clicks - Number of times the popup was canceled.\ncancel_n_clicks_timestamp - Last time the cancel button was clicked.\ndisplayed - Set to true to send the ConfirmDialog.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_confirmdialogprovider","page":"API Docs","title":"Dashboards.dcc_confirmdialogprovider","text":"dcc_confirmdialogprovider(;kwags...)\ndcc_confirmdialogprovider(children::Any;kwags...)\ndcc_confirmdialogprovider(children_maker::Function;kwags...)\n\nA wrapper component that will display a confirmation dialog when its child component has been clicked on.\n\nFor example:\n\ndcc.ConfirmDialogProvider(\n    html.Button('click me', id='btn'),\n    message='Danger - Are you sure you want to continue.'\n    id='confirm')\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nmessage - Message to show in the popup.\nsubmit_n_clicks - Number of times the submit was clicked\nsubmit_n_clicks_timestamp - Last time the submit button was clicked.\ncancel_n_clicks - Number of times the popup was canceled.\ncancel_n_clicks_timestamp - Last time the cancel button was clicked.\ndisplayed - Is the modal currently displayed.\nchildren - The children to hijack clicks from and display the popup.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_datepickerrange","page":"API Docs","title":"Dashboards.dcc_datepickerrange","text":"dcc_datepickerrange(;kwags...)\n\nDatePickerRange is a tailor made component designed for selecting timespan across multiple days off of a calendar.\n\nThe DatePicker integrates well with the Python datetime module with the startDate and endDate being returned in a string format suitable for creating datetime objects.\n\nThis component is based off of Airbnb's react-dates react component which can be found here: https://github.com/airbnb/react-dates\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nstart_date - Specifies the starting date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nstart_date_id - The HTML element ID of the start date input field.\n\nNot used by Dash, only by CSS.\n\nend_date_id - The HTML element ID of the end date input field.\n\nNot used by Dash, only by CSS.\n\nend_date - Specifies the ending date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nmin_date_allowed - Specifies the lowest selectable date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nmax_date_allowed - Specifies the highest selectable date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\ninitial_visible_month - Specifies the month that is initially presented when the user\n\nopens the calendar. Accepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nstart_date_placeholder_text - Text that will be displayed in the first input\n\nbox of the date picker when no date is selected. Default value is 'Start Date'\n\nend_date_placeholder_text - Text that will be displayed in the second input\n\nbox of the date picker when no date is selected. Default value is 'End Date'\n\nday_size - Size of rendered calendar days, higher number\n\nmeans bigger day size and larger calendar overall\n\ncalendar_orientation - Orientation of calendar, either vertical or horizontal.\n\nValid options are 'vertical' or 'horizontal'.\n\nis_RTL - Determines whether the calendar and days operate\n\nfrom left to right or from right to left\n\nreopen_calendar_on_clear - If True, the calendar will automatically open when cleared\nnumber_of_months_shown - Number of calendar months that are shown when calendar is opened\nwith_portal - If True, calendar will open in a screen overlay portal,\n\nnot supported on vertical calendar\n\nwith_full_screen_portal - If True, calendar will open in a full screen overlay portal, will\n\ntake precedent over 'withPortal' if both are set to true, not supported on vertical calendar\n\nfirst_day_of_week - Specifies what day is the first day of the week, values must be\n\nfrom [0, ..., 6] with 0 denoting Sunday and 6 denoting Saturday\n\nminimum_nights - Specifies a minimum number of nights that must be selected between\n\nthe startDate and the endDate\n\nstay_open_on_select - If True the calendar will not close when the user has selected a value\n\nand will wait until the user clicks off the calendar\n\nshow_outside_days - If True the calendar will display days that rollover into\n\nthe next month\n\nmonth_format - Specifies the format that the month will be displayed in the calendar,\n\nvalid formats are variations of \"MM YY\". For example: \"MM YY\" renders as '05 97' for May 1997 \"MMMM, YYYY\" renders as 'May, 1997' for May 1997 \"MMM, YY\" renders as 'Sep, 97' for September 1997\n\ndisplay_format - Specifies the format that the selected dates will be displayed\n\nvalid formats are variations of \"MM YY DD\". For example: \"MM YY DD\" renders as '05 10 97' for May 10th 1997 \"MMMM, YY\" renders as 'May, 1997' for May 10th 1997 \"M, D, YYYY\" renders as '07, 10, 1997' for September 10th 1997 \"MMMM\" renders as 'May' for May 10 1997\n\ndisabled - If True, no dates can be selected.\nclearable - Whether or not the dropdown is \"clearable\", that is, whether or\n\nnot a small \"x\" appears on the right of the dropdown that removes the selected value.\n\nstyle - CSS styles appended to wrapper div\nclassName - Appends a CSS class to the wrapper div component.\nupdatemode - Determines when the component should update\n\nits value. If bothdates, then the DatePicker will only trigger its value when the user has finished picking both dates. If singledate, then the DatePicker will update its value as one date is picked.\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, any persisted_props that the user has changed while using the app will keep those changes, as long as the new prop value also matches what was given originally. Used in conjunction with persistence_type and persisted_props.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_datepickersingle","page":"API Docs","title":"Dashboards.dcc_datepickersingle","text":"dcc_datepickersingle(;kwags...)\n\nDatePickerSingle is a tailor made component designed for selecting a single day off of a calendar.\n\nThe DatePicker integrates well with the Python datetime module with the startDate and endDate being returned in a string format suitable for creating datetime objects.\n\nThis component is based off of Airbnb's react-dates react component which can be found here: https://github.com/airbnb/react-dates\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\ndate - Specifies the starting date for the component, best practice is to pass\n\nvalue via datetime object\n\nmin_date_allowed - Specifies the lowest selectable date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nmax_date_allowed - Specifies the highest selectable date for the component.\n\nAccepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\ninitial_visible_month - Specifies the month that is initially presented when the user\n\nopens the calendar. Accepts datetime.datetime objects or strings in the format 'YYYY-MM-DD'\n\nday_size - Size of rendered calendar days, higher number\n\nmeans bigger day size and larger calendar overall\n\ncalendar_orientation - Orientation of calendar, either vertical or horizontal.\n\nValid options are 'vertical' or 'horizontal'.\n\nis_RTL - Determines whether the calendar and days operate\n\nfrom left to right or from right to left\n\nplaceholder - Text that will be displayed in the input\n\nbox of the date picker when no date is selected. Default value is 'Start Date'\n\nreopen_calendar_on_clear - If True, the calendar will automatically open when cleared\nnumber_of_months_shown - Number of calendar months that are shown when calendar is opened\nwith_portal - If True, calendar will open in a screen overlay portal,\n\nnot supported on vertical calendar\n\nwith_full_screen_portal - If True, calendar will open in a full screen overlay portal, will\n\ntake precedent over 'withPortal' if both are set to True, not supported on vertical calendar\n\nfirst_day_of_week - Specifies what day is the first day of the week, values must be\n\nfrom [0, ..., 6] with 0 denoting Sunday and 6 denoting Saturday\n\nstay_open_on_select - If True the calendar will not close when the user has selected a value\n\nand will wait until the user clicks off the calendar\n\nshow_outside_days - If True the calendar will display days that rollover into\n\nthe next month\n\nmonth_format - Specifies the format that the month will be displayed in the calendar,\n\nvalid formats are variations of \"MM YY\". For example: \"MM YY\" renders as '05 97' for May 1997 \"MMMM, YYYY\" renders as 'May, 1997' for May 1997 \"MMM, YY\" renders as 'Sep, 97' for September 1997\n\ndisplay_format - Specifies the format that the selected dates will be displayed\n\nvalid formats are variations of \"MM YY DD\". For example: \"MM YY DD\" renders as '05 10 97' for May 10th 1997 \"MMMM, YY\" renders as 'May, 1997' for May 10th 1997 \"M, D, YYYY\" renders as '07, 10, 1997' for September 10th 1997 \"MMMM\" renders as 'May' for May 10 1997\n\ndisabled - If True, no dates can be selected.\nclearable - Whether or not the dropdown is \"clearable\", that is, whether or\n\nnot a small \"x\" appears on the right of the dropdown that removes the selected value.\n\nstyle - CSS styles appended to wrapper div\nclassName - Appends a CSS class to the wrapper div component.\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a date that the user has changed while using the app will keep that change, as long as the new date also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only date is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_dropdown","page":"API Docs","title":"Dashboards.dcc_dropdown","text":"dcc_dropdown(;kwags...)\n\nDropdown is an interactive dropdown element for selecting one or more items. The values and labels of the dropdown items are specified in the options property and the selected item(s) are specified with the value property.\n\nUse a dropdown when you have many options (more than 5) or when you are constrained for space. Otherwise, you can use RadioItems or a Checklist, which have the benefit of showing the users all of the items at once.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\noptions - An array of options {label: [string|number], value: [string|number]},\n\nan optional disabled field can be used for each option\n\nvalue - The value of the input. If multi is false (the default)\n\nthen value is just a string that corresponds to the values provided in the options property. If multi is true, then multiple values can be selected at once, and value is an array of items with values corresponding to those in the options prop.\n\noptionHeight - height of each option. Can be increased when label lengths would wrap around\nclassName - className of the dropdown element\nclearable - Whether or not the dropdown is \"clearable\", that is, whether or\n\nnot a small \"x\" appears on the right of the dropdown that removes the selected value.\n\ndisabled - If true, this dropdown is disabled and the selection cannot be changed.\nmulti - If true, the user can select multiple values\nplaceholder - The grey, default text shown when no option is selected\nsearchable - Whether to enable the searching feature or not\nsearch_value - The value typed in the DropDown for searching.\nstyle - Defines CSS styles which will override styles previously set.\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_graph","page":"API Docs","title":"Dashboards.dcc_graph","text":"dcc_graph(;kwags...)\n\nGraph can be used to render any plotly.js-powered data visualization.\n\nYou can define callbacks based on user interaction with Graphs such as hovering, clicking or selecting\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nclickData - Data from latest click event. Read-only.\nclickAnnotationData - Data from latest click annotation event. Read-only.\nhoverData - Data from latest hover event. Read-only.\nclear_on_unhover - If True, clear_on_unhover will clear the hoverData property\n\nwhen the user \"unhovers\" from a point. If False, then the hoverData property will be equal to the data from the last point that was hovered over.\n\nselectedData - Data from latest select event. Read-only.\nrelayoutData - Data from latest relayout event which occurs\n\nwhen the user zooms or pans on the plot or other layout-level edits. Has the form {<attr string>: <value>} describing the changes made. Read-only.\n\nextendData - Data that should be appended to existing traces. Has the form\n\n[updateData, traceIndices, maxPoints], where updateData is an object containing the data to extend, traceIndices (optional) is an array of trace indices that should be extended, and maxPoints (optional) is either an integer defining the maximum number of points allowed or an object with key:value pairs matching updateData Reference the Plotly.extendTraces API for full usage: https://plot.ly/javascript/plotlyjs-function-reference/#plotlyextendtraces\n\nrestyleData - Data from latest restyle event which occurs\n\nwhen the user toggles a legend item, changes parcoords selections, or other trace-level edits. Has the form [edits, indices], where edits is an object {<attr string>: <value>} describing the changes made, and indices is an array of trace indices that were edited. Read-only.\n\nfigure - Plotly figure object. See schema:\n\nhttps://plot.ly/javascript/reference\n\nconfig is set separately by the config property\n\nstyle - Generic style overrides on the plot div\nclassName - className of the parent div\nanimate - Beta: If true, animate between updates using\n\nplotly.js's animate function\n\nanimation_options - Beta: Object containing animation settings.\n\nOnly applies if animate is true\n\nconfig - Plotly.js config options.\n\nSee https://plot.ly/javascript/configuration-options/ for more info.\n\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_input","page":"API Docs","title":"Dashboards.dcc_input","text":"dcc_input(;kwags...)\n\nA basic HTML input control for entering text, numbers, or passwords.\n\nNote that checkbox and radio types are supported through the Checklist and RadioItems component. Dates, times, and file uploads are also supported through separate components.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nvalue - The value of the input\nstyle - The input's inline styles\nclassName - The class of the input element\ndebounce - If true, changes to input will be sent back to the Dash server only on enter or when losing focus.\n\nIf it's false, it will sent the value back on every change.\n\ntype - The type of control to render.\nautoComplete - This attribute indicates whether the value of the control can be automatically completed by the browser.\nautoFocus - The element should be automatically focused after the page loaded.\n\nautoFocus is an HTML boolean attribute - it is enabled by a boolean or 'autoFocus'. Alternative capitalizations autofocus & AUTOFOCUS are also acccepted.\n\ndisabled - If true, the input is disabled and can't be clicked on.\n\ndisabled is an HTML boolean attribute - it is enabled by a boolean or 'disabled'. Alternative capitalizations DISABLED\n\ninputMode - Provides a hint to the browser as to the type of data that might be\n\nentered by the user while editing the element or its contents.\n\nlist - Identifies a list of pre-defined options to suggest to the user.\n\nThe value must be the id of a <datalist> element in the same document. The browser displays only options that are valid values for this input element. This attribute is ignored when the type attribute's value is hidden, checkbox, radio, file, or a button type.\n\nmax - The maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.\nmaxLength - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the maximum number of characters (in UTF-16 code units) that the user can enter. For other control types, it is ignored. It can exceed the value of the size attribute. If it is not specified, the user can enter an unlimited number of characters. Specifying a negative number results in the default behavior (i.e. the user can enter an unlimited number of characters). The constraint is evaluated only when the value of the attribute has been changed.\nmin - The minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.\nminLength - If the value of the type attribute is text, email, search, password, tel, or url, this attribute specifies the minimum number of characters (in Unicode code points) that the user can enter. For other control types, it is ignored.\nmultiple - This Boolean attribute indicates whether the user can enter more than one value. This attribute applies when the type attribute is set to email or file, otherwise it is ignored.\nname - The name of the control, which is submitted with the form data.\npattern - A regular expression that the control's value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is text, search, tel, url, email, or password, otherwise it is ignored. The regular expression language is the same as JavaScript RegExp algorithm, with the 'u' parameter that makes it treat the pattern as a sequence of unicode code points. The pattern is not surrounded by forward slashes.\nplaceholder - A hint to the user of what can be entered in the control . The placeholder text must not contain carriage returns or line-feeds. Note: Do not use the placeholder attribute instead of a <label> element, their purposes are different. The <label> attribute describes the role of the form element (i.e. it indicates what kind of information is expected), and the placeholder attribute is a hint about the format that the content should take. There are cases in which the placeholder attribute is never displayed to the user, so the form must be understandable without it.\nreadOnly - This attribute indicates that the user cannot modify the value of the control. The value of the attribute is irrelevant. If you need read-write access to the input value, do not add the \"readonly\" attribute. It is ignored if the value of the type attribute is hidden, range, color, checkbox, radio, file, or a button type (such as button or submit).\n\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or 'readOnly'. Alternative capitalizations readonly & READONLY are also acccepted.\n\nrequired - This attribute specifies that the user must fill in a value before submitting a form. It cannot be used when the type attribute is hidden, image, or a button type (submit, reset, or button). The :optional and :required CSS pseudo-classes will be applied to the field as appropriate.\n\nrequired is an HTML boolean attribute - it is enabled by a boolean or 'required'. Alternative capitalizations REQUIRED are also acccepted.\n\nselectionDirection - The direction in which selection occurred. This is \"forward\" if the selection was made from left-to-right in an LTR locale or right-to-left in an RTL locale, or \"backward\" if the selection was made in the opposite direction. On platforms on which it's possible this value isn't known, the value can be \"none\"; for example, on macOS, the default direction is \"none\", then as the user begins to modify the selection using the keyboard, this will change to reflect the direction in which the selection is expanding.\nselectionEnd - The offset into the element's text content of the last selected character. If there's no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\nselectionStart - The offset into the element's text content of the first selected character. If there's no selection, this value indicates the offset to the character following the current text input cursor position (that is, the position the next character typed would occupy).\nsize - The initial size of the control. This value is in pixels unless the value of the type attribute is text or password, in which case it is an integer number of characters. Starting in, this attribute applies only when the type attribute is set to text, search, tel, url, email, or password, otherwise it is ignored. In addition, the size must be greater than zero. If you do not specify a size, a default value of 20 is used.' simply states \"the user agent should ensure that at least that many characters are visible\", but different characters can have different widths in certain fonts. In some browsers, a certain string with x characters will not be entirely visible even if size is defined to at least x.\nspellCheck - Setting the value of this attribute to true indicates that the element needs to have its spelling and grammar checked. The value default indicates that the element is to act according to a default behavior, possibly based on the parent element's own spellcheck value. The value false indicates that the element should not be checked.\nstep - Works with the min and max attributes to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number. If this attribute is not set to any, the control accepts only values at multiples of the step value greater than the minimum.\nn_submit - Number of times the Enter key was pressed while the input had focus.\nn_submit_timestamp - Last time that Enter was pressed.\nn_blur - Number of times the input lost focus.\nn_blur_timestamp - Last time the input lost focus.\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_interval","page":"API Docs","title":"Dashboards.dcc_interval","text":"dcc_interval(;kwags...)\n\nA component that repeatedly increments a counter n_intervals with a fixed time delay between each increment. Interval is good for triggering a component on a recurring basis. The time delay is set with the property \"interval\" in milliseconds.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\ninterval - This component will increment the counter n_intervals every\n\ninterval milliseconds\n\ndisabled - If True, the counter will no longer update\nn_intervals - Number of times the interval has passed\nmax_intervals - Number of times the interval will be fired.\n\nIf -1, then the interval has no limit (the default) and if 0 then the interval stops running.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_link","page":"API Docs","title":"Dashboards.dcc_link","text":"dcc_link(;kwags...)\ndcc_link(children::Any;kwags...)\ndcc_link(children_maker::Function;kwags...)\n\nLink allows you to create a clickable link within a multi-page app.\n\nFor links with destinations outside the current app, html.A is a better component to use.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nhref - The URL of a linked resource.\nrefresh - Controls whether or not the page will refresh when the link is clicked\nclassName - Often used with CSS to style elements with common properties.\nstyle - Defines CSS styles which will override styles previously set.\nchildren - The children of this component\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_loading","page":"API Docs","title":"Dashboards.dcc_loading","text":"dcc_loading(;kwags...)\ndcc_loading(children::Any;kwags...)\ndcc_loading(children_maker::Function;kwags...)\n\nA Loading component that wraps any other component and displays a spinner until the wrapped component has rendered.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - Array that holds components to render\ntype - Property that determines which spinner to show - one of 'graph', 'cube', 'circle', 'dot', or 'default'.\nfullscreen - Boolean that determines if the loading spinner will be displayed full-screen or not\ndebug - Boolean that determines if the loading spinner will display the status.propname and componentname\nclassName - Additional CSS class for the root DOM node\nstyle - Additional CSS styling for the root DOM node\ncolor - Primary colour used for the loading spinners\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_location","page":"API Docs","title":"Dashboards.dcc_location","text":"dcc_location(;kwags...)\n\nUpdate and track the current window.location object through the window.history state. Use in conjunction with the dash_core_components.Link component to make apps with multiple pages.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\npathname - pathname in window.location - e.g., \"/my/full/pathname\"\nsearch - search in window.location - e.g., \"?myargument=1\"\nhash - hash in window.location - e.g., \"#myhash\"\nhref - href in window.location - e.g., \"/my/full/pathname?myargument=1#myhash\"\nrefresh - Refresh the page when the location is updated?\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_logoutbutton","page":"API Docs","title":"Dashboards.dcc_logoutbutton","text":"dcc_logoutbutton(;kwags...)\n\nLogout button to submit a form post request to the logout_url prop. Usage is intended for dash-deployment-server authentication.\n\nDDS usage:\n\ndcc.LogoutButton(logout_url=os.getenv('DASH_LOGOUT_URL'))\n\nCustom usage:\n\nImplement a login mechanism.\nCreate a flask route with a post method handler.\n\n@app.server.route('/logout', methods=['POST'])\n\nThe logout route should perform what's necessary for the user to logout.\nIf you store the session in a cookie, clear the cookie:\n\nrep = flask.Response(); rep.set_cookie('session', '', expires=0)\n\nCreate a logout button component and assign it the logout_url\n\ndcc.LogoutButton(logout_url='/logout')\n\nSee https://dash.plot.ly/dash-core-components/logout_button for more documentation and examples.\n\nArguments\n\nid - Id of the button.\nlabel - Text of the button\nlogout_url - Url to submit a post logout request.\nstyle - Style of the button\nmethod - Http method to submit the logout form.\nclassName - CSS class for the button.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_markdown","page":"API Docs","title":"Dashboards.dcc_markdown","text":"dcc_markdown(;kwags...)\ndcc_markdown(children::Any;kwags...)\ndcc_markdown(children_maker::Function;kwags...)\n\nA component that renders Markdown text as specified by the GitHub Markdown spec. These component uses react-markdown under the hood.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nclassName - Class name of the container element\ndangerously_allow_html - A boolean to control raw HTML escaping.\n\nSetting HTML from code is risky because it's easy to inadvertently expose your users to a cross-site scripting (XSS) (https://en.wikipedia.org/wiki/Cross-site_scripting) attack.\n\nchildren - A markdown string (or array of strings) that adhreres to the CommonMark spec\ndedent - Remove matching leading whitespace from all lines.\n\nLines that are empty, or contain only whitespace, are ignored. Both spaces and tab characters are removed, but only if they match; we will not convert tabs to spaces or vice versa.\n\nhighlight_config - Config options for syntax highlighting.\nloading_state - Object that holds the loading state object coming from dash-renderer\nstyle - User-defined inline styles for the rendered Markdown\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_radioitems","page":"API Docs","title":"Dashboards.dcc_radioitems","text":"dcc_radioitems(;kwags...)\n\nRadioItems is a component that encapsulates several radio item inputs. The values and labels of the RadioItems is specified in the options property and the seleced item is specified with the value property. Each radio item is rendered as an input with a surrounding label.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\noptions - An array of options\nvalue - The currently selected value\nstyle - The style of the container (div)\nclassName - The class of the container (div)\ninputStyle - The style of the <input> radio element\ninputClassName - The class of the <input> radio element\nlabelStyle - The style of the <label> that wraps the radio input\n\nand the option's label\n\nlabelClassName - The class of the <label> that wraps the radio input\n\nand the option's label\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_rangeslider","page":"API Docs","title":"Dashboards.dcc_rangeslider","text":"dcc_rangeslider(;kwags...)\n\nA double slider with two handles. Used for specifying a range of numerical values.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nmarks - Marks on the slider.\n\nThe key determines the position (a number), and the value determines what will show. If you want to set the style of a specific mark point, the value should be an object which contains style and label properties.\n\nvalue - The value of the input\nallowCross - allowCross could be set as true to allow those handles to cross.\nclassName - Additional CSS class for the root DOM node\ncount - Determine how many ranges to render, and multiple handles\n\nwill be rendered (number + 1).\n\ndisabled - If true, the handles can't be moved.\ndots - When the step value is greater than 1,\n\nyou can set the dots to true if you want to render the slider with dots.\n\nincluded - If the value is true, it means a continuous\n\nvalue is included. Otherwise, it is an independent value.\n\nmin - Minimum allowed value of the slider\nmax - Maximum allowed value of the slider\npushable - pushable could be set as true to allow pushing of\n\nsurrounding handles when moving an handle. When set to a number, the number will be the minimum ensured distance between handles.\n\ntooltip - Configuration for tooltips describing the current slider values\nstep - Value by which increments or decrements are made\nvertical - If true, the slider will be vertical\nupdatemode - Determines when the component should update\n\nits value. If mouseup, then the slider will only trigger its value when the user has finished dragging the slider. If drag, then the slider will update its value continuously as it is being dragged. Only use drag if your updates are fast.\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_slider","page":"API Docs","title":"Dashboards.dcc_slider","text":"dcc_slider(;kwags...)\n\nA slider component with a single handle.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nmarks - Marks on the slider.\n\nThe key determines the position (a number), and the value determines what will show. If you want to set the style of a specific mark point, the value should be an object which contains style and label properties.\n\nvalue - The value of the input\nclassName - Additional CSS class for the root DOM node\ndisabled - If true, the handles can't be moved.\ndots - When the step value is greater than 1,\n\nyou can set the dots to true if you want to render the slider with dots.\n\nincluded - If the value is true, it means a continuous\n\nvalue is included. Otherwise, it is an independent value.\n\nmin - Minimum allowed value of the slider\nmax - Maximum allowed value of the slider\ntooltip - Configuration for tooltips describing the current slider value\nstep - Value by which increments or decrements are made\nvertical - If true, the slider will be vertical\nupdatemode - Determines when the component should update\n\nits value. If mouseup, then the slider will only trigger its value when the user has finished dragging the slider. If drag, then the slider will update its value continuously as it is being dragged. Only use drag if your updates are fast.\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_store","page":"API Docs","title":"Dashboards.dcc_store","text":"dcc_store(;kwags...)\n\nEasily keep data on the client side with this component. The data is not inserted in the DOM. Data can be in memory, localStorage or sessionStorage. The data will be kept with the id as key.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nstorage_type - The type of the web storage.\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\ndata - The stored data for the id.\nclear_data - Set to true to remove the data contained in data_key.\nmodified_timestamp - The last time the storage was modified.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_tab","page":"API Docs","title":"Dashboards.dcc_tab","text":"dcc_tab(;kwags...)\ndcc_tab(children::Any;kwags...)\ndcc_tab(children_maker::Function;kwags...)\n\nPart of dcc.Tabs - this is the child Tab component used to render a tabbed page. Its children will be set as the content of that tab, which if clicked will become visible.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nlabel - The tab's label\nchildren - The content of the tab - will only be displayed if this tab is selected\nvalue - Value for determining which Tab is currently selected\ndisabled - Determines if tab is disabled or not - defaults to false\ndisabled_style - Overrides the default (inline) styles when disabled\ndisabled_className - Appends a class to the Tab component when it is disabled.\nclassName - Appends a class to the Tab component.\nselected_className - Appends a class to the Tab component when it is selected.\nstyle - Overrides the default (inline) styles for the Tab component.\nselected_style - Overrides the default (inline) styles for the Tab component when it is selected.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_tabs","page":"API Docs","title":"Dashboards.dcc_tabs","text":"dcc_tabs(;kwags...)\ndcc_tabs(children::Any;kwags...)\ndcc_tabs(children_maker::Function;kwags...)\n\nA Dash component that lets you render pages with tabs - the Tabs component's children can be dcc.Tab components, which can hold a label that will be displayed as a tab, and can in turn hold children components that will be that tab's content.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nvalue - The value of the currently selected Tab\nclassName - Appends a class to the Tabs container holding the individual Tab components.\ncontent_className - Appends a class to the Tab content container holding the children of the Tab that is selected.\nparent_className - Appends a class to the top-level parent container holding both the Tabs container and the content container.\nstyle - Appends (inline) styles to the Tabs container holding the individual Tab components.\nparent_style - Appends (inline) styles to the top-level parent container holding both the Tabs container and the content container.\ncontent_style - Appends (inline) styles to the tab content container holding the children of the Tab that is selected.\nvertical - Renders the tabs vertically (on the side)\nmobile_breakpoint - Breakpoint at which tabs are rendered full width (can be 0 if you don't want full width tabs on mobile)\nchildren - Array that holds Tab components\ncolors - Holds the colors used by the Tabs and Tab components. If you set these, you should specify colors for all properties, so:\n\ncolors: {    border: '#d6d6d6',    primary: '#1975FA',    background: '#f9f9f9'  }\n\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_textarea","page":"API Docs","title":"Dashboards.dcc_textarea","text":"dcc_textarea(;kwags...)\n\nA basic HTML textarea for entering multiline text.\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nvalue - The value of the textarea\nautoFocus - The element should be automatically focused after the page loaded.\ncols - Defines the number of columns in a textarea.\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\nmaxLength - Defines the maximum number of characters allowed in the element.\nminLength - Defines the minimum number of characters allowed in the element.\nname - Name of the element. For example used by the server to identify the fields in form submits.\nplaceholder - Provides a hint to the user of what can be entered in the field.\nreadOnly - Indicates whether the element can be edited.\n\nreadOnly is an HTML boolean attribute - it is enabled by a boolean or 'readOnly'. Alternative capitalizations readonly & READONLY are also acccepted.\n\nrequired - Indicates whether this element is required to fill out or not.\n\nrequired is an HTML boolean attribute - it is enabled by a boolean or 'required'. Alternative capitalizations REQUIRED are also acccepted.\n\nrows - Defines the number of rows in a text area.\nwrap - Indicates whether the text should be wrapped.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nn_blur - Number of times the textarea lost focus.\nn_blur_timestamp - Last time the textarea lost focus.\nn_clicks - Number of times the textarea has been clicked.\nn_clicks_timestamp - Last time the textarea was clicked.\nloading_state - Object that holds the loading state object coming from dash-renderer\npersistence - Used to allow user interactions in this component to be persisted when\n\nthe component - or the page - is refreshed. If persisted is truthy and hasn't changed from its previous value, a value that the user has changed while using the app will keep that change, as long as the new value also matches what was given originally. Used in conjunction with persistence_type.\n\npersisted_props - Properties whose user interactions will persist after refreshing the\n\ncomponent or the page. Since only value is allowed this prop can normally be ignored.\n\npersistence_type - Where persisted user changes will be stored:\n\nmemory: only kept in memory, reset on page refresh. local: window.localStorage, data is kept after the browser quit. session: window.sessionStorage, data is cleared once the browser quit.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.dcc_upload","page":"API Docs","title":"Dashboards.dcc_upload","text":"dcc_upload(;kwags...)\ndcc_upload(children::Any;kwags...)\ndcc_upload(children_maker::Function;kwags...)\n\nUpload components allow your app to accept user-uploaded files via drag'n'drop\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\ncontents - The contents of the uploaded file as a binary string\nfilename - The name of the file(s) that was(were) uploaded.\n\nNote that this does not include the path of the file (for security reasons).\n\nlast_modified - The last modified date of the file that was uploaded in unix time\n\n(seconds since 1970).\n\nchildren - Contents of the upload component\naccept - Allow specific types of files.\n\nSee https://github.com/okonet/attr-accept for more information. Keep in mind that mime type determination is not reliable across platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows. In some cases there might not be a mime type set at all. See: https://github.com/react-dropzone/react-dropzone/issues/276\n\ndisabled - Enable/disable the upload component entirely\ndisable_click - Disallow clicking on the component to open the file dialog\nmax_size - Maximum file size. If -1, then infinite\nmin_size - Minimum file size\nmultiple - Allow dropping multiple files\nclassName - HTML class name of the component\nclassName_active - HTML class name of the component while active\nclassName_reject - HTML class name of the component if rejected\nclassName_disabled - HTML class name of the component if disabled\nstyle - CSS styles to apply\nstyle_active - CSS styles to apply while active\nstyle_reject - CSS styles if rejected\nstyle_disabled - CSS styles if disabled\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_a","page":"API Docs","title":"Dashboards.html_a","text":"html_a(;kwags...)\nhtml_a(children::Any;kwags...)\nhtml_a(children_maker::Function;kwags...)\n\nA is a wrapper for the <a> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndownload - Indicates that the hyperlink is to be used for downloading a resource.\nhref - The URL of a linked resource.\nhrefLang - Specifies the language of the linked resource.\nmedia - Specifies a hint of the media for which the linked resource was designed.\nrel - Specifies the relationship of the target object to the link object.\nshape - \ntarget - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_abbr","page":"API Docs","title":"Dashboards.html_abbr","text":"html_abbr(;kwags...)\nhtml_abbr(children::Any;kwags...)\nhtml_abbr(children_maker::Function;kwags...)\n\nAbbr is a wrapper for the <abbr> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_acronym","page":"API Docs","title":"Dashboards.html_acronym","text":"html_acronym(;kwags...)\nhtml_acronym(children::Any;kwags...)\nhtml_acronym(children_maker::Function;kwags...)\n\nAcronym is a wrapper for the <acronym> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_address","page":"API Docs","title":"Dashboards.html_address","text":"html_address(;kwags...)\nhtml_address(children::Any;kwags...)\nhtml_address(children_maker::Function;kwags...)\n\nAddress is a wrapper for the <address> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_area","page":"API Docs","title":"Dashboards.html_area","text":"html_area(;kwags...)\nhtml_area(children::Any;kwags...)\nhtml_area(children_maker::Function;kwags...)\n\nArea is a wrapper for the <area> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nalt - Alternative text in case an image can't be displayed.\ncoords - A set of values specifying the coordinates of the hot-spot region.\ndownload - Indicates that the hyperlink is to be used for downloading a resource.\nhref - The URL of a linked resource.\nhrefLang - Specifies the language of the linked resource.\nmedia - Specifies a hint of the media for which the linked resource was designed.\nrel - Specifies the relationship of the target object to the link object.\nshape - \ntarget - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_article","page":"API Docs","title":"Dashboards.html_article","text":"html_article(;kwags...)\nhtml_article(children::Any;kwags...)\nhtml_article(children_maker::Function;kwags...)\n\nArticle is a wrapper for the <article> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_aside","page":"API Docs","title":"Dashboards.html_aside","text":"html_aside(;kwags...)\nhtml_aside(children::Any;kwags...)\nhtml_aside(children_maker::Function;kwags...)\n\nAside is a wrapper for the <aside> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_audio","page":"API Docs","title":"Dashboards.html_audio","text":"html_audio(;kwags...)\nhtml_audio(children::Any;kwags...)\nhtml_audio(children_maker::Function;kwags...)\n\nAudio is a wrapper for the <audio> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoPlay - The audio or video should play as soon as possible.\ncontrols - Indicates whether the browser should show playback controls to the user.\ncrossOrigin - How the element handles cross-origin requests\nloop - Indicates whether the media should start playing from the start when it's finished.\nmuted - Indicates whether the audio will be initially silenced on page load.\npreload - Indicates whether the whole resource, parts of it or nothing should be preloaded.\nsrc - The URL of the embeddable content.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_b","page":"API Docs","title":"Dashboards.html_b","text":"html_b(;kwags...)\nhtml_b(children::Any;kwags...)\nhtml_b(children_maker::Function;kwags...)\n\nB is a wrapper for the <b> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_base","page":"API Docs","title":"Dashboards.html_base","text":"html_base(;kwags...)\nhtml_base(children::Any;kwags...)\nhtml_base(children_maker::Function;kwags...)\n\nBase is a wrapper for the <base> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nhref - The URL of a linked resource.\ntarget - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_basefont","page":"API Docs","title":"Dashboards.html_basefont","text":"html_basefont(;kwags...)\nhtml_basefont(children::Any;kwags...)\nhtml_basefont(children_maker::Function;kwags...)\n\nBasefont is a wrapper for the <basefont> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_bdi","page":"API Docs","title":"Dashboards.html_bdi","text":"html_bdi(;kwags...)\nhtml_bdi(children::Any;kwags...)\nhtml_bdi(children_maker::Function;kwags...)\n\nBdi is a wrapper for the <bdi> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_bdo","page":"API Docs","title":"Dashboards.html_bdo","text":"html_bdo(;kwags...)\nhtml_bdo(children::Any;kwags...)\nhtml_bdo(children_maker::Function;kwags...)\n\nBdo is a wrapper for the <bdo> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_big","page":"API Docs","title":"Dashboards.html_big","text":"html_big(;kwags...)\nhtml_big(children::Any;kwags...)\nhtml_big(children_maker::Function;kwags...)\n\nBig is a wrapper for the <big> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_blink","page":"API Docs","title":"Dashboards.html_blink","text":"html_blink(;kwags...)\nhtml_blink(children::Any;kwags...)\nhtml_blink(children_maker::Function;kwags...)\n\nBlink is a wrapper for the <blink> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_blockquote","page":"API Docs","title":"Dashboards.html_blockquote","text":"html_blockquote(;kwags...)\nhtml_blockquote(children::Any;kwags...)\nhtml_blockquote(children_maker::Function;kwags...)\n\nBlockquote is a wrapper for the <blockquote> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncite - Contains a URI which points to the source of the quote or change.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_br","page":"API Docs","title":"Dashboards.html_br","text":"html_br(;kwags...)\nhtml_br(children::Any;kwags...)\nhtml_br(children_maker::Function;kwags...)\n\nBr is a wrapper for the <br> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_button","page":"API Docs","title":"Dashboards.html_button","text":"html_button(;kwags...)\nhtml_button(children::Any;kwags...)\nhtml_button(children_maker::Function;kwags...)\n\nButton is a wrapper for the <button> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoFocus - The element should be automatically focused after the page loaded.\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\nformAction - Indicates the action of the element, overriding the action defined in the <form>.\nformEncType - If the button/input is a submit button (type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\nformMethod - If the button/input is a submit button (type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\nformNoValidate - If the button/input is a submit button (type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\nformTarget - If the button/input is a submit button (type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\nname - Name of the element. For example used by the server to identify the fields in form submits.\ntype - Defines the type of the element.\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_canvas","page":"API Docs","title":"Dashboards.html_canvas","text":"html_canvas(;kwags...)\nhtml_canvas(children::Any;kwags...)\nhtml_canvas(children_maker::Function;kwags...)\n\nCanvas is a wrapper for the <canvas> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_caption","page":"API Docs","title":"Dashboards.html_caption","text":"html_caption(;kwags...)\nhtml_caption(children::Any;kwags...)\nhtml_caption(children_maker::Function;kwags...)\n\nCaption is a wrapper for the <caption> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_center","page":"API Docs","title":"Dashboards.html_center","text":"html_center(;kwags...)\nhtml_center(children::Any;kwags...)\nhtml_center(children_maker::Function;kwags...)\n\nCenter is a wrapper for the <center> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_cite","page":"API Docs","title":"Dashboards.html_cite","text":"html_cite(;kwags...)\nhtml_cite(children::Any;kwags...)\nhtml_cite(children_maker::Function;kwags...)\n\nCite is a wrapper for the <cite> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_code","page":"API Docs","title":"Dashboards.html_code","text":"html_code(;kwags...)\nhtml_code(children::Any;kwags...)\nhtml_code(children_maker::Function;kwags...)\n\nCode is a wrapper for the <code> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_col","page":"API Docs","title":"Dashboards.html_col","text":"html_col(;kwags...)\nhtml_col(children::Any;kwags...)\nhtml_col(children_maker::Function;kwags...)\n\nCol is a wrapper for the <col> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nspan - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_colgroup","page":"API Docs","title":"Dashboards.html_colgroup","text":"html_colgroup(;kwags...)\nhtml_colgroup(children::Any;kwags...)\nhtml_colgroup(children_maker::Function;kwags...)\n\nColgroup is a wrapper for the <colgroup> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nspan - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_command","page":"API Docs","title":"Dashboards.html_command","text":"html_command(;kwags...)\nhtml_command(children::Any;kwags...)\nhtml_command(children_maker::Function;kwags...)\n\nCommand is a wrapper for the <command> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/command\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nchecked - Indicates whether the element should be checked on page load.\ndisabled - Indicates whether the user can interact with the element.\nicon - Specifies a picture which represents the command.\nradioGroup - \ntype - Defines the type of the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_content","page":"API Docs","title":"Dashboards.html_content","text":"html_content(;kwags...)\nhtml_content(children::Any;kwags...)\nhtml_content(children_maker::Function;kwags...)\n\nContent is a wrapper for the <content> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/content\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_data","page":"API Docs","title":"Dashboards.html_data","text":"html_data(;kwags...)\nhtml_data(children::Any;kwags...)\nhtml_data(children_maker::Function;kwags...)\n\nData is a wrapper for the <data> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_datalist","page":"API Docs","title":"Dashboards.html_datalist","text":"html_datalist(;kwags...)\nhtml_datalist(children::Any;kwags...)\nhtml_datalist(children_maker::Function;kwags...)\n\nDatalist is a wrapper for the <datalist> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_dd","page":"API Docs","title":"Dashboards.html_dd","text":"html_dd(;kwags...)\nhtml_dd(children::Any;kwags...)\nhtml_dd(children_maker::Function;kwags...)\n\nDd is a wrapper for the <dd> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_del","page":"API Docs","title":"Dashboards.html_del","text":"html_del(;kwags...)\nhtml_del(children::Any;kwags...)\nhtml_del(children_maker::Function;kwags...)\n\nDel is a wrapper for the <del> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncite - Contains a URI which points to the source of the quote or change.\ndateTime - Indicates the date and time associated with the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_details","page":"API Docs","title":"Dashboards.html_details","text":"html_details(;kwags...)\nhtml_details(children::Any;kwags...)\nhtml_details(children_maker::Function;kwags...)\n\nDetails is a wrapper for the <details> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nopen - Indicates whether the details will be shown on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_dfn","page":"API Docs","title":"Dashboards.html_dfn","text":"html_dfn(;kwags...)\nhtml_dfn(children::Any;kwags...)\nhtml_dfn(children_maker::Function;kwags...)\n\nDfn is a wrapper for the <dfn> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_dialog","page":"API Docs","title":"Dashboards.html_dialog","text":"html_dialog(;kwags...)\nhtml_dialog(children::Any;kwags...)\nhtml_dialog(children_maker::Function;kwags...)\n\nDialog is a wrapper for the <dialog> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_div","page":"API Docs","title":"Dashboards.html_div","text":"html_div(;kwags...)\nhtml_div(children::Any;kwags...)\nhtml_div(children_maker::Function;kwags...)\n\nDiv is a wrapper for the <div> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_dl","page":"API Docs","title":"Dashboards.html_dl","text":"html_dl(;kwags...)\nhtml_dl(children::Any;kwags...)\nhtml_dl(children_maker::Function;kwags...)\n\nDl is a wrapper for the <dl> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_dt","page":"API Docs","title":"Dashboards.html_dt","text":"html_dt(;kwags...)\nhtml_dt(children::Any;kwags...)\nhtml_dt(children_maker::Function;kwags...)\n\nDt is a wrapper for the <dt> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_element","page":"API Docs","title":"Dashboards.html_element","text":"html_element(;kwags...)\nhtml_element(children::Any;kwags...)\nhtml_element(children_maker::Function;kwags...)\n\nElement is a wrapper for the <element> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/element\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_em","page":"API Docs","title":"Dashboards.html_em","text":"html_em(;kwags...)\nhtml_em(children::Any;kwags...)\nhtml_em(children_maker::Function;kwags...)\n\nEm is a wrapper for the <em> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_embed","page":"API Docs","title":"Dashboards.html_embed","text":"html_embed(;kwags...)\nhtml_embed(children::Any;kwags...)\nhtml_embed(children_maker::Function;kwags...)\n\nEmbed is a wrapper for the <embed> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nsrc - The URL of the embeddable content.\ntype - Defines the type of the element.\nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_fieldset","page":"API Docs","title":"Dashboards.html_fieldset","text":"html_fieldset(;kwags...)\nhtml_fieldset(children::Any;kwags...)\nhtml_fieldset(children_maker::Function;kwags...)\n\nFieldset is a wrapper for the <fieldset> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\nname - Name of the element. For example used by the server to identify the fields in form submits.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_figcaption","page":"API Docs","title":"Dashboards.html_figcaption","text":"html_figcaption(;kwags...)\nhtml_figcaption(children::Any;kwags...)\nhtml_figcaption(children_maker::Function;kwags...)\n\nFigcaption is a wrapper for the <figcaption> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_figure","page":"API Docs","title":"Dashboards.html_figure","text":"html_figure(;kwags...)\nhtml_figure(children::Any;kwags...)\nhtml_figure(children_maker::Function;kwags...)\n\nFigure is a wrapper for the <figure> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_font","page":"API Docs","title":"Dashboards.html_font","text":"html_font(;kwags...)\nhtml_font(children::Any;kwags...)\nhtml_font(children_maker::Function;kwags...)\n\nFont is a wrapper for the <font> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_footer","page":"API Docs","title":"Dashboards.html_footer","text":"html_footer(;kwags...)\nhtml_footer(children::Any;kwags...)\nhtml_footer(children_maker::Function;kwags...)\n\nFooter is a wrapper for the <footer> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_form","page":"API Docs","title":"Dashboards.html_form","text":"html_form(;kwags...)\nhtml_form(children::Any;kwags...)\nhtml_form(children_maker::Function;kwags...)\n\nForm is a wrapper for the <form> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccept - List of types the server accepts, typically a file type.\nacceptCharset - List of supported charsets.\naction - The URI of a program that processes the information submitted via the form.\nautoComplete - Indicates whether controls in this form can by default have their values automatically completed by the browser.\nencType - Defines the content type of the form date when the method is POST.\nmethod - Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\nname - Name of the element. For example used by the server to identify the fields in form submits.\nnoValidate - This attribute indicates that the form shouldn't be validated when submitted.\ntarget - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_frame","page":"API Docs","title":"Dashboards.html_frame","text":"html_frame(;kwags...)\nhtml_frame(children::Any;kwags...)\nhtml_frame(children_maker::Function;kwags...)\n\nFrame is a wrapper for the <frame> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_frameset","page":"API Docs","title":"Dashboards.html_frameset","text":"html_frameset(;kwags...)\nhtml_frameset(children::Any;kwags...)\nhtml_frameset(children_maker::Function;kwags...)\n\nFrameset is a wrapper for the <frameset> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h1","page":"API Docs","title":"Dashboards.html_h1","text":"html_h1(;kwags...)\nhtml_h1(children::Any;kwags...)\nhtml_h1(children_maker::Function;kwags...)\n\nH1 is a wrapper for the <h1> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h2","page":"API Docs","title":"Dashboards.html_h2","text":"html_h2(;kwags...)\nhtml_h2(children::Any;kwags...)\nhtml_h2(children_maker::Function;kwags...)\n\nH2 is a wrapper for the <h2> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h3","page":"API Docs","title":"Dashboards.html_h3","text":"html_h3(;kwags...)\nhtml_h3(children::Any;kwags...)\nhtml_h3(children_maker::Function;kwags...)\n\nH3 is a wrapper for the <h3> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h4","page":"API Docs","title":"Dashboards.html_h4","text":"html_h4(;kwags...)\nhtml_h4(children::Any;kwags...)\nhtml_h4(children_maker::Function;kwags...)\n\nH4 is a wrapper for the <h4> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h5","page":"API Docs","title":"Dashboards.html_h5","text":"html_h5(;kwags...)\nhtml_h5(children::Any;kwags...)\nhtml_h5(children_maker::Function;kwags...)\n\nH5 is a wrapper for the <h5> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_h6","page":"API Docs","title":"Dashboards.html_h6","text":"html_h6(;kwags...)\nhtml_h6(children::Any;kwags...)\nhtml_h6(children_maker::Function;kwags...)\n\nH6 is a wrapper for the <h6> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_header","page":"API Docs","title":"Dashboards.html_header","text":"html_header(;kwags...)\nhtml_header(children::Any;kwags...)\nhtml_header(children_maker::Function;kwags...)\n\nHeader is a wrapper for the <header> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_hgroup","page":"API Docs","title":"Dashboards.html_hgroup","text":"html_hgroup(;kwags...)\nhtml_hgroup(children::Any;kwags...)\nhtml_hgroup(children_maker::Function;kwags...)\n\nHgroup is a wrapper for the <hgroup> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_hr","page":"API Docs","title":"Dashboards.html_hr","text":"html_hr(;kwags...)\nhtml_hr(children::Any;kwags...)\nhtml_hr(children_maker::Function;kwags...)\n\nHr is a wrapper for the <hr> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_i","page":"API Docs","title":"Dashboards.html_i","text":"html_i(;kwags...)\nhtml_i(children::Any;kwags...)\nhtml_i(children_maker::Function;kwags...)\n\nI is a wrapper for the <i> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_iframe","page":"API Docs","title":"Dashboards.html_iframe","text":"html_iframe(;kwags...)\nhtml_iframe(children::Any;kwags...)\nhtml_iframe(children_maker::Function;kwags...)\n\nIframe is a wrapper for the <iframe> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nname - Name of the element. For example used by the server to identify the fields in form submits.\nsandbox - Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\nsrc - The URL of the embeddable content.\nsrcDoc - \nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_img","page":"API Docs","title":"Dashboards.html_img","text":"html_img(;kwags...)\nhtml_img(children::Any;kwags...)\nhtml_img(children_maker::Function;kwags...)\n\nImg is a wrapper for the <img> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nalt - Alternative text in case an image can't be displayed.\ncrossOrigin - How the element handles cross-origin requests\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nsizes - \nsrc - The URL of the embeddable content.\nsrcSet - One or more responsive image candidates.\nuseMap - \nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_ins","page":"API Docs","title":"Dashboards.html_ins","text":"html_ins(;kwags...)\nhtml_ins(children::Any;kwags...)\nhtml_ins(children_maker::Function;kwags...)\n\nIns is a wrapper for the <ins> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncite - Contains a URI which points to the source of the quote or change.\ndateTime - Indicates the date and time associated with the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_isindex","page":"API Docs","title":"Dashboards.html_isindex","text":"html_isindex(;kwags...)\nhtml_isindex(children::Any;kwags...)\nhtml_isindex(children_maker::Function;kwags...)\n\nIsindex is a wrapper for the <isindex> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_kbd","page":"API Docs","title":"Dashboards.html_kbd","text":"html_kbd(;kwags...)\nhtml_kbd(children::Any;kwags...)\nhtml_kbd(children_maker::Function;kwags...)\n\nKbd is a wrapper for the <kbd> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_keygen","page":"API Docs","title":"Dashboards.html_keygen","text":"html_keygen(;kwags...)\nhtml_keygen(children::Any;kwags...)\nhtml_keygen(children_maker::Function;kwags...)\n\nKeygen is a wrapper for the <keygen> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoFocus - The element should be automatically focused after the page loaded.\nchallenge - A challenge string that is submitted along with the public key.\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\nkeyType - Specifies the type of key generated.\nname - Name of the element. For example used by the server to identify the fields in form submits.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_label","page":"API Docs","title":"Dashboards.html_label","text":"html_label(;kwags...)\nhtml_label(children::Any;kwags...)\nhtml_label(children_maker::Function;kwags...)\n\nLabel is a wrapper for the <label> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nhtmlFor - Describes elements which belongs to this one.\nform - Indicates the form that is the owner of the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_legend","page":"API Docs","title":"Dashboards.html_legend","text":"html_legend(;kwags...)\nhtml_legend(children::Any;kwags...)\nhtml_legend(children_maker::Function;kwags...)\n\nLegend is a wrapper for the <legend> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_li","page":"API Docs","title":"Dashboards.html_li","text":"html_li(;kwags...)\nhtml_li(children::Any;kwags...)\nhtml_li(children_maker::Function;kwags...)\n\nLi is a wrapper for the <li> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_link","page":"API Docs","title":"Dashboards.html_link","text":"html_link(;kwags...)\nhtml_link(children::Any;kwags...)\nhtml_link(children_maker::Function;kwags...)\n\nLink is a wrapper for the <link> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncrossOrigin - How the element handles cross-origin requests\nhref - The URL of a linked resource.\nhrefLang - Specifies the language of the linked resource.\nintegrity - Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\nmedia - Specifies a hint of the media for which the linked resource was designed.\nrel - Specifies the relationship of the target object to the link object.\nsizes - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_listing","page":"API Docs","title":"Dashboards.html_listing","text":"html_listing(;kwags...)\nhtml_listing(children::Any;kwags...)\nhtml_listing(children_maker::Function;kwags...)\n\nListing is a wrapper for the <listing> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/listing\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_main","page":"API Docs","title":"Dashboards.html_main","text":"html_main(;kwags...)\nhtml_main(children::Any;kwags...)\nhtml_main(children_maker::Function;kwags...)\n\nMain is a wrapper for the <main> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_mapel","page":"API Docs","title":"Dashboards.html_mapel","text":"html_mapel(;kwags...)\nhtml_mapel(children::Any;kwags...)\nhtml_mapel(children_maker::Function;kwags...)\n\nMapEl is a wrapper for the <map> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nname - Name of the element. For example used by the server to identify the fields in form submits.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_mark","page":"API Docs","title":"Dashboards.html_mark","text":"html_mark(;kwags...)\nhtml_mark(children::Any;kwags...)\nhtml_mark(children_maker::Function;kwags...)\n\nMark is a wrapper for the <mark> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_marquee","page":"API Docs","title":"Dashboards.html_marquee","text":"html_marquee(;kwags...)\nhtml_marquee(children::Any;kwags...)\nhtml_marquee(children_maker::Function;kwags...)\n\nMarquee is a wrapper for the <marquee> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nloop - Indicates whether the media should start playing from the start when it's finished.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_meta","page":"API Docs","title":"Dashboards.html_meta","text":"html_meta(;kwags...)\nhtml_meta(children::Any;kwags...)\nhtml_meta(children_maker::Function;kwags...)\n\nMeta is a wrapper for the <meta> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncharSet - Declares the character encoding of the page or script.\ncontent - A value associated with http-equiv or name depending on the context.\nhttpEquiv - Defines a pragma directive.\nname - Name of the element. For example used by the server to identify the fields in form submits.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_meter","page":"API Docs","title":"Dashboards.html_meter","text":"html_meter(;kwags...)\nhtml_meter(children::Any;kwags...)\nhtml_meter(children_maker::Function;kwags...)\n\nMeter is a wrapper for the <meter> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nform - Indicates the form that is the owner of the element.\nhigh - Indicates the lower bound of the upper range.\nlow - Indicates the upper bound of the lower range.\nmax - Indicates the maximum value allowed.\nmin - Indicates the minimum value allowed.\noptimum - Indicates the optimal numeric value.\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_multicol","page":"API Docs","title":"Dashboards.html_multicol","text":"html_multicol(;kwags...)\nhtml_multicol(children::Any;kwags...)\nhtml_multicol(children_maker::Function;kwags...)\n\nMulticol is a wrapper for the <multicol> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/multicol\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_nav","page":"API Docs","title":"Dashboards.html_nav","text":"html_nav(;kwags...)\nhtml_nav(children::Any;kwags...)\nhtml_nav(children_maker::Function;kwags...)\n\nNav is a wrapper for the <nav> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_nextid","page":"API Docs","title":"Dashboards.html_nextid","text":"html_nextid(;kwags...)\nhtml_nextid(children::Any;kwags...)\nhtml_nextid(children_maker::Function;kwags...)\n\nNextid is a wrapper for the <nextid> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nextid\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_nobr","page":"API Docs","title":"Dashboards.html_nobr","text":"html_nobr(;kwags...)\nhtml_nobr(children::Any;kwags...)\nhtml_nobr(children_maker::Function;kwags...)\n\nNobr is a wrapper for the <nobr> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_noscript","page":"API Docs","title":"Dashboards.html_noscript","text":"html_noscript(;kwags...)\nhtml_noscript(children::Any;kwags...)\nhtml_noscript(children_maker::Function;kwags...)\n\nNoscript is a wrapper for the <noscript> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_objectel","page":"API Docs","title":"Dashboards.html_objectel","text":"html_objectel(;kwags...)\nhtml_objectel(children::Any;kwags...)\nhtml_objectel(children_maker::Function;kwags...)\n\nObjectEl is a wrapper for the <object> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nform - Indicates the form that is the owner of the element.\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nname - Name of the element. For example used by the server to identify the fields in form submits.\ntype - Defines the type of the element.\nuseMap - \nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_ol","page":"API Docs","title":"Dashboards.html_ol","text":"html_ol(;kwags...)\nhtml_ol(children::Any;kwags...)\nhtml_ol(children_maker::Function;kwags...)\n\nOl is a wrapper for the <ol> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nreversed - Indicates whether the list should be displayed in a descending order instead of a ascending.\nstart - Defines the first number if other than 1.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_optgroup","page":"API Docs","title":"Dashboards.html_optgroup","text":"html_optgroup(;kwags...)\nhtml_optgroup(children::Any;kwags...)\nhtml_optgroup(children_maker::Function;kwags...)\n\nOptgroup is a wrapper for the <optgroup> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndisabled - Indicates whether the user can interact with the element.\nlabel - Specifies a user-readable title of the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_option","page":"API Docs","title":"Dashboards.html_option","text":"html_option(;kwags...)\nhtml_option(children::Any;kwags...)\nhtml_option(children_maker::Function;kwags...)\n\nOption is a wrapper for the <option> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndisabled - Indicates whether the user can interact with the element.\nlabel - Specifies a user-readable title of the element.\nselected - Defines a value which will be selected on page load.\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_output","page":"API Docs","title":"Dashboards.html_output","text":"html_output(;kwags...)\nhtml_output(children::Any;kwags...)\nhtml_output(children_maker::Function;kwags...)\n\nOutput is a wrapper for the <output> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nhtmlFor - Describes elements which belongs to this one.\nform - Indicates the form that is the owner of the element.\nname - Name of the element. For example used by the server to identify the fields in form submits.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_p","page":"API Docs","title":"Dashboards.html_p","text":"html_p(;kwags...)\nhtml_p(children::Any;kwags...)\nhtml_p(children_maker::Function;kwags...)\n\nP is a wrapper for the <p> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_param","page":"API Docs","title":"Dashboards.html_param","text":"html_param(;kwags...)\nhtml_param(children::Any;kwags...)\nhtml_param(children_maker::Function;kwags...)\n\nParam is a wrapper for the <param> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nname - Name of the element. For example used by the server to identify the fields in form submits.\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_picture","page":"API Docs","title":"Dashboards.html_picture","text":"html_picture(;kwags...)\nhtml_picture(children::Any;kwags...)\nhtml_picture(children_maker::Function;kwags...)\n\nPicture is a wrapper for the <picture> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_plaintext","page":"API Docs","title":"Dashboards.html_plaintext","text":"html_plaintext(;kwags...)\nhtml_plaintext(children::Any;kwags...)\nhtml_plaintext(children_maker::Function;kwags...)\n\nPlaintext is a wrapper for the <plaintext> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_pre","page":"API Docs","title":"Dashboards.html_pre","text":"html_pre(;kwags...)\nhtml_pre(children::Any;kwags...)\nhtml_pre(children_maker::Function;kwags...)\n\nPre is a wrapper for the <pre> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_progress","page":"API Docs","title":"Dashboards.html_progress","text":"html_progress(;kwags...)\nhtml_progress(children::Any;kwags...)\nhtml_progress(children_maker::Function;kwags...)\n\nProgress is a wrapper for the <progress> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nform - Indicates the form that is the owner of the element.\nmax - Indicates the maximum value allowed.\nvalue - Defines a default value which will be displayed in the element on page load.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_q","page":"API Docs","title":"Dashboards.html_q","text":"html_q(;kwags...)\nhtml_q(children::Any;kwags...)\nhtml_q(children_maker::Function;kwags...)\n\nQ is a wrapper for the <q> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncite - Contains a URI which points to the source of the quote or change.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_rb","page":"API Docs","title":"Dashboards.html_rb","text":"html_rb(;kwags...)\nhtml_rb(children::Any;kwags...)\nhtml_rb(children_maker::Function;kwags...)\n\nRb is a wrapper for the <rb> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_rp","page":"API Docs","title":"Dashboards.html_rp","text":"html_rp(;kwags...)\nhtml_rp(children::Any;kwags...)\nhtml_rp(children_maker::Function;kwags...)\n\nRp is a wrapper for the <rp> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_rt","page":"API Docs","title":"Dashboards.html_rt","text":"html_rt(;kwags...)\nhtml_rt(children::Any;kwags...)\nhtml_rt(children_maker::Function;kwags...)\n\nRt is a wrapper for the <rt> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_rtc","page":"API Docs","title":"Dashboards.html_rtc","text":"html_rtc(;kwags...)\nhtml_rtc(children::Any;kwags...)\nhtml_rtc(children_maker::Function;kwags...)\n\nRtc is a wrapper for the <rtc> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_ruby","page":"API Docs","title":"Dashboards.html_ruby","text":"html_ruby(;kwags...)\nhtml_ruby(children::Any;kwags...)\nhtml_ruby(children_maker::Function;kwags...)\n\nRuby is a wrapper for the <ruby> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_s","page":"API Docs","title":"Dashboards.html_s","text":"html_s(;kwags...)\nhtml_s(children::Any;kwags...)\nhtml_s(children_maker::Function;kwags...)\n\nS is a wrapper for the <s> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_samp","page":"API Docs","title":"Dashboards.html_samp","text":"html_samp(;kwags...)\nhtml_samp(children::Any;kwags...)\nhtml_samp(children_maker::Function;kwags...)\n\nSamp is a wrapper for the <samp> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_script","page":"API Docs","title":"Dashboards.html_script","text":"html_script(;kwags...)\nhtml_script(children::Any;kwags...)\nhtml_script(children_maker::Function;kwags...)\n\nScript is a wrapper for the <script> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nasync - Indicates that the script should be executed asynchronously.\ncharSet - Declares the character encoding of the page or script.\ncrossOrigin - How the element handles cross-origin requests\ndefer - Indicates that the script should be executed after the page has been parsed.\nintegrity - Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\nsrc - The URL of the embeddable content.\ntype - Defines the type of the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_section","page":"API Docs","title":"Dashboards.html_section","text":"html_section(;kwags...)\nhtml_section(children::Any;kwags...)\nhtml_section(children_maker::Function;kwags...)\n\nSection is a wrapper for the <section> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_select","page":"API Docs","title":"Dashboards.html_select","text":"html_select(;kwags...)\nhtml_select(children::Any;kwags...)\nhtml_select(children_maker::Function;kwags...)\n\nSelect is a wrapper for the <select> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoComplete - Indicates whether controls in this form can by default have their values automatically completed by the browser.\nautoFocus - The element should be automatically focused after the page loaded.\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\nmultiple - Indicates whether multiple values can be entered in an input of the type email or file.\nname - Name of the element. For example used by the server to identify the fields in form submits.\nrequired - Indicates whether this element is required to fill out or not.\nsize - Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_shadow","page":"API Docs","title":"Dashboards.html_shadow","text":"html_shadow(;kwags...)\nhtml_shadow(children::Any;kwags...)\nhtml_shadow(children_maker::Function;kwags...)\n\nShadow is a wrapper for the <shadow> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/shadow\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_slot","page":"API Docs","title":"Dashboards.html_slot","text":"html_slot(;kwags...)\nhtml_slot(children::Any;kwags...)\nhtml_slot(children_maker::Function;kwags...)\n\nSlot is a wrapper for the <slot> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_small","page":"API Docs","title":"Dashboards.html_small","text":"html_small(;kwags...)\nhtml_small(children::Any;kwags...)\nhtml_small(children_maker::Function;kwags...)\n\nSmall is a wrapper for the <small> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_source","page":"API Docs","title":"Dashboards.html_source","text":"html_source(;kwags...)\nhtml_source(children::Any;kwags...)\nhtml_source(children_maker::Function;kwags...)\n\nSource is a wrapper for the <source> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nmedia - Specifies a hint of the media for which the linked resource was designed.\nsizes - \nsrc - The URL of the embeddable content.\nsrcSet - One or more responsive image candidates.\ntype - Defines the type of the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_spacer","page":"API Docs","title":"Dashboards.html_spacer","text":"html_spacer(;kwags...)\nhtml_spacer(children::Any;kwags...)\nhtml_spacer(children_maker::Function;kwags...)\n\nSpacer is a wrapper for the <spacer> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_span","page":"API Docs","title":"Dashboards.html_span","text":"html_span(;kwags...)\nhtml_span(children::Any;kwags...)\nhtml_span(children_maker::Function;kwags...)\n\nSpan is a wrapper for the <span> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_strike","page":"API Docs","title":"Dashboards.html_strike","text":"html_strike(;kwags...)\nhtml_strike(children::Any;kwags...)\nhtml_strike(children_maker::Function;kwags...)\n\nStrike is a wrapper for the <strike> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_strong","page":"API Docs","title":"Dashboards.html_strong","text":"html_strong(;kwags...)\nhtml_strong(children::Any;kwags...)\nhtml_strong(children_maker::Function;kwags...)\n\nStrong is a wrapper for the <strong> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_sub","page":"API Docs","title":"Dashboards.html_sub","text":"html_sub(;kwags...)\nhtml_sub(children::Any;kwags...)\nhtml_sub(children_maker::Function;kwags...)\n\nSub is a wrapper for the <sub> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_summary","page":"API Docs","title":"Dashboards.html_summary","text":"html_summary(;kwags...)\nhtml_summary(children::Any;kwags...)\nhtml_summary(children_maker::Function;kwags...)\n\nSummary is a wrapper for the <summary> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_sup","page":"API Docs","title":"Dashboards.html_sup","text":"html_sup(;kwags...)\nhtml_sup(children::Any;kwags...)\nhtml_sup(children_maker::Function;kwags...)\n\nSup is a wrapper for the <sup> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_table","page":"API Docs","title":"Dashboards.html_table","text":"html_table(;kwags...)\nhtml_table(children::Any;kwags...)\nhtml_table(children_maker::Function;kwags...)\n\nTable is a wrapper for the <table> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nsummary - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_tbody","page":"API Docs","title":"Dashboards.html_tbody","text":"html_tbody(;kwags...)\nhtml_tbody(children::Any;kwags...)\nhtml_tbody(children_maker::Function;kwags...)\n\nTbody is a wrapper for the <tbody> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_td","page":"API Docs","title":"Dashboards.html_td","text":"html_td(;kwags...)\nhtml_td(children::Any;kwags...)\nhtml_td(children_maker::Function;kwags...)\n\nTd is a wrapper for the <td> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncolSpan - The colspan attribute defines the number of columns a cell should span.\nheaders - IDs of the <th> elements which applies to this element.\nrowSpan - Defines the number of rows a table cell should span over.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_template","page":"API Docs","title":"Dashboards.html_template","text":"html_template(;kwags...)\nhtml_template(children::Any;kwags...)\nhtml_template(children_maker::Function;kwags...)\n\nTemplate is a wrapper for the <template> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_textarea","page":"API Docs","title":"Dashboards.html_textarea","text":"html_textarea(;kwags...)\nhtml_textarea(children::Any;kwags...)\nhtml_textarea(children_maker::Function;kwags...)\n\nTextarea is a wrapper for the <textarea> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoComplete - Indicates whether controls in this form can by default have their values automatically completed by the browser.\nautoFocus - The element should be automatically focused after the page loaded.\ncols - Defines the number of columns in a textarea.\ndisabled - Indicates whether the user can interact with the element.\nform - Indicates the form that is the owner of the element.\ninputMode - Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\nmaxLength - Defines the maximum number of characters allowed in the element.\nminLength - Defines the minimum number of characters allowed in the element.\nname - Name of the element. For example used by the server to identify the fields in form submits.\nplaceholder - Provides a hint to the user of what can be entered in the field.\nreadOnly - Indicates whether the element can be edited.\nrequired - Indicates whether this element is required to fill out or not.\nrows - Defines the number of rows in a text area.\nwrap - Indicates whether the text should be wrapped.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_tfoot","page":"API Docs","title":"Dashboards.html_tfoot","text":"html_tfoot(;kwags...)\nhtml_tfoot(children::Any;kwags...)\nhtml_tfoot(children_maker::Function;kwags...)\n\nTfoot is a wrapper for the <tfoot> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_th","page":"API Docs","title":"Dashboards.html_th","text":"html_th(;kwags...)\nhtml_th(children::Any;kwags...)\nhtml_th(children_maker::Function;kwags...)\n\nTh is a wrapper for the <th> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ncolSpan - The colspan attribute defines the number of columns a cell should span.\nheaders - IDs of the <th> elements which applies to this element.\nrowSpan - Defines the number of rows a table cell should span over.\nscope - Defines the cells that the header test (defined in the th element) relates to.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_thead","page":"API Docs","title":"Dashboards.html_thead","text":"html_thead(;kwags...)\nhtml_thead(children::Any;kwags...)\nhtml_thead(children_maker::Function;kwags...)\n\nThead is a wrapper for the <thead> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_time","page":"API Docs","title":"Dashboards.html_time","text":"html_time(;kwags...)\nhtml_time(children::Any;kwags...)\nhtml_time(children_maker::Function;kwags...)\n\nTime is a wrapper for the <time> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndateTime - Indicates the date and time associated with the element.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_title","page":"API Docs","title":"Dashboards.html_title","text":"html_title(;kwags...)\nhtml_title(children::Any;kwags...)\nhtml_title(children_maker::Function;kwags...)\n\nTitle is a wrapper for the <title> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_tr","page":"API Docs","title":"Dashboards.html_tr","text":"html_tr(;kwags...)\nhtml_tr(children::Any;kwags...)\nhtml_tr(children_maker::Function;kwags...)\n\nTr is a wrapper for the <tr> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_track","page":"API Docs","title":"Dashboards.html_track","text":"html_track(;kwags...)\nhtml_track(children::Any;kwags...)\nhtml_track(children_maker::Function;kwags...)\n\nTrack is a wrapper for the <track> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\ndefault - Indicates that the track should be enabled unless the user's preferences indicate something different.\nkind - Specifies the kind of text track.\nlabel - Specifies a user-readable title of the element.\nsrc - The URL of the embeddable content.\nsrcLang - \naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_u","page":"API Docs","title":"Dashboards.html_u","text":"html_u(;kwags...)\nhtml_u(children::Any;kwags...)\nhtml_u(children_maker::Function;kwags...)\n\nU is a wrapper for the <u> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_ul","page":"API Docs","title":"Dashboards.html_ul","text":"html_ul(;kwags...)\nhtml_ul(children::Any;kwags...)\nhtml_ul(children_maker::Function;kwags...)\n\nUl is a wrapper for the <ul> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_var","page":"API Docs","title":"Dashboards.html_var","text":"html_var(;kwags...)\nhtml_var(children::Any;kwags...)\nhtml_var(children_maker::Function;kwags...)\n\nVar is a wrapper for the <var> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_video","page":"API Docs","title":"Dashboards.html_video","text":"html_video(;kwags...)\nhtml_video(children::Any;kwags...)\nhtml_video(children_maker::Function;kwags...)\n\nVideo is a wrapper for the <video> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\nautoPlay - The audio or video should play as soon as possible.\ncontrols - Indicates whether the browser should show playback controls to the user.\ncrossOrigin - How the element handles cross-origin requests\nheight - Specifies the height of elements listed here. For all other elements, use the CSS height property.        Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead.\nloop - Indicates whether the media should start playing from the start when it's finished.\nmuted - Indicates whether the audio will be initially silenced on page load.\nposter - A URL indicating a poster frame to show until the user plays or seeks.\npreload - Indicates whether the whole resource, parts of it or nothing should be preloaded.\nsrc - The URL of the embeddable content.\nwidth - For the elements listed here, this establishes the element's width.        Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead.\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_wbr","page":"API Docs","title":"Dashboards.html_wbr","text":"html_wbr(;kwags...)\nhtml_wbr(children::Any;kwags...)\nhtml_wbr(children_maker::Function;kwags...)\n\nWbr is a wrapper for the <wbr> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.html_xmp","page":"API Docs","title":"Dashboards.html_xmp","text":"html_xmp(;kwags...)\nhtml_xmp(children::Any;kwags...)\nhtml_xmp(children_maker::Function;kwags...)\n\nXmp is a wrapper for the <xmp> HTML5 element. For detailed attribute info see: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp\n\nArguments\n\nid - The ID of this component, used to identify dash components\n\nin callbacks. The ID needs to be unique across all of the components in an app.\n\nchildren - The children of this component\nn_clicks - An integer that represents the number of times\n\nthat this element has been clicked on.\n\nn_clicks_timestamp - An integer that represents the time (in ms since 1970)\n\nat which n_clicks changed. This can be used to tell which button was changed most recently.\n\nkey - A unique identifier for the component, used to improve\n\nperformance by React.js while rendering components See https://reactjs.org/docs/lists-and-keys.html for more info\n\nrole - The ARIA role attribute\naccessKey - Defines a keyboard shortcut to activate or add focus to the element.\nclassName - Often used with CSS to style elements with common properties.\ncontentEditable - Indicates whether the element's content is editable.\ncontextMenu - Defines the ID of a <menu> element which will serve as the element's context menu.\ndir - Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\ndraggable - Defines whether the element can be dragged.\nhidden - Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\nlang - Defines the language used in the element.\nspellCheck - Indicates whether spell checking is allowed for the element.\nstyle - Defines CSS styles which will override styles previously set.\ntabIndex - Overrides the browser's default tab order and follows the one specified instead.\ntitle - Text to be displayed in a tooltip when hovering over the element.\nloading_state - Object that holds the loading state object coming from dash-renderer\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.make_handler-Tuple{Dash}","page":"API Docs","title":"Dashboards.make_handler","text":"make_handler(app::Dash; debug = false)\n\nMake handler for routing Dash application in HTTP package \n\n#Arguments\n\napp::Dash - Dash application\ndebug::Bool = false - Enable/disable all the dev tools\n\n#Examples\n\njulia> app = Dash(\"Test\") do\n    html_div() do\n        html_h1(\"Test Dashboard\")\n    end\nend\njulia> handler = make_handler(app)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)\n\n\n\n\n\n","category":"method"},{"location":"api/#Dashboards.@callid_str-Tuple{Any}","page":"API Docs","title":"Dashboards.@callid_str","text":"@callid_str\"\n\nMacro for crating Dash CallbackId. Parse string in form \"[{State1[, ...]}] Input1[, ...] => Output1[, ...]\"\n\n#Examples\n\n    id1 = callid\"{inputDiv.children} input.value => output1.value, output2.value\"\n\n\n\n\n\n","category":"macro"},{"location":"#Dashboards-1","page":"Dashboards","title":"Dashboards","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Julia backend for Plotly Dash It is in its early development phase so any bugs may arise, please report me about issues","category":"page"},{"location":"#Version-0.2.5-released-1","page":"Dashboards","title":"Version 0.2.5 released","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Now you can use PlotlyBase.Plot to work with the figure property of the dcc_graph component. Examples are: Plot usage in layout, Plot usage in callback\nAdded PreventUpdate exception and no_update() function to prevent updates in callback. See PreventUpdate example and no_update() example\nMost of dashboards from Dash Tutorial are implemented using Dashboards.jl. See DashboardsExamples repo","category":"page"},{"location":"#Instalation-1","page":"Dashboards","title":"Instalation","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Julia version >= 1.2 is required. It also works in 1.1 now, but I do not plan testing and support for versions under 1.2","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"import Pkg; Pkg.add(Pkg.PackageSpec(url = \"https://github.com/waralex/Dashboards.jl.git\"))","category":"page"},{"location":"#Usage-1","page":"Dashboards","title":"Usage","text":"","category":"section"},{"location":"#Basic-application-1","page":"Dashboards","title":"Basic application","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        html_h1(\"Hello Dashboards\"),\n        html_div(\"Dashboards: Julia interface for Dash\"),\n        dcc_graph(\n            id = \"example-graph\",\n            figure = (\n                data = [\n                    (x = [1, 2, 3], y = [4, 1, 2], type = \"bar\", name = \"SF\"),\n                    (x = [1, 2, 3], y = [2, 4, 5], type = \"bar\", name = \"Montréal\"),\n                ],\n                layout = (title = \"Dash Data Visualization\",)\n            )\n        )\n    end\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"The Dash struct represent dashboard application.\nThe constructor for Dash struct is Dash(layout_makerFunction nameString  external_stylesheetsVectorString = VectorString() url_base_pathname= assets_folderString = assets) where layout_maker is a function with signature ()::Component\nUnlike the python version where each Dash component is represented as a separate class, all components in Dashboard are represented by struct Component.\nYou can create Component specific for concrete Dash component by the set of functions in the form lowercase(component package)_lowercase(component name). For example, in python html <div> element is represented as HTML.Div in Dasboards it is created using function html_div\nThe list of all supported components is available in docstring for Dasboards module\nAll functions for a component creation have the signature (;kwargs...)::Component. List of key arguments specific for the concrete component is available in the docstring for each function\nFunctions for creation components which have children property have two additional methods (childrenAny kwargs)Component and (children_makerFunction kwargs)Component. children must by string or number or single component or collection of components\nmake_handler(appDash debugBool = false) makes handler function for using in HTTP package","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Once you have run the code to create the Dashboard, go to http://127.0.0.1:8080 in your browser to view the Dashboard!","category":"page"},{"location":"#Basic-Callback-1","page":"Dashboards","title":"Basic Callback","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        dcc_input(id = \"my-id\", value=\"initial value\", type = \"text\"),\n        html_div(id = \"my-div\")        \n    end\nend\njulia> callback!(app, callid\"my-id.value => my-div.children\") do input_value\n    \"You've entered $(input_value)\"\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"You can make your dashboard interactive by register callbacks for changes in frontend with function callback(funcFunction appDash idCallbackId)\nInputs and outputs (and states, see below) of callback are described by struct CallbackId which can easily created by string macro callid\"\"\ncallid\"\" parse string in form state1  input1 = output1 where all items is element idproperty name\nCallback function must have the signature(states..., inputs...) and return data for output","category":"page"},{"location":"#States-and-Multiple-Outputs-1","page":"Dashboards","title":"States and Multiple Outputs","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        dcc_input(id = \"my-id\", value=\"initial value\", type = \"text\"),\n        html_div(id = \"my-div\"),\n        html_div(id = \"my-div2\")        \n    end\nend\njulia> callback!(app, callid\"{my-id.type} my-id.value => my-div.children, my-div2.children\") do state_value, input_value\n    \"You've entered $(input_value) in input with type $(state_value)\",\n    \"You've entered $(input_value)\"\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"For multiple output callback must return any collection with element for each output","category":"page"},{"location":"#Comparation-with-original-python-syntax-1","page":"Dashboards","title":"Comparation with original python syntax","text":"","category":"section"},{"location":"#component-naming:-1","page":"Dashboards","title":"component naming:","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"html.Div => html_div, dcc.Graph => dcc_graph and etc","category":"page"},{"location":"#component-creation:-1","page":"Dashboards","title":"component creation:","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Just like in Python, functions for creating components have keywords arguments, which are the same as in Python. html_div(id=my-id children=Simple text). For components that have children prop, two additional signatures are available. (children kwargs) and (children_makerFunction kwargs) so You can write html_div(Simple text id=my-id)  for simple elements or avoid the hell of nested brackets with do syntax for complex elements:","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"html_div(id=\"outer-div\") do\n    html_h1(\"Welcome\"),\n    html_div(id=\"inner-div\") do\n    ......\n    end\nend","category":"page"},{"location":"#application-and-layout:-1","page":"Dashboards","title":"application and layout:","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"python:","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"app = dash.Dash(\"Test\", external_stylesheets=external_stylesheets)\napp.layout = html.Div(children=[....])","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Dashboards:","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"app = Dash(\"Test\", external_stylesheets=external_stylesheets) do\n   html_div() do\n    ......\n   end\nend","category":"page"},{"location":"#callbacks:-1","page":"Dashboards","title":"callbacks:","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"python:","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"@app.callback(Output('output', 'children'),\n              [Input('submit-button', 'n_clicks')],\n              [State('state-1', 'value'),\n               State('state-2', 'value')])\ndef update_output(n_clicks, state1, state2):\n.....\n","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Dashboards:","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"callback!(app, callid\"\"\"{state1.value, state2.value}\n                                   submit-button.n_clicks\n                                   => output.children\"\"\" ) do state1, state2, n_clicks\n.....\nend","category":"page"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"Be careful - in Dashboards states came first in arguments list","category":"page"},{"location":"#json:-1","page":"Dashboards","title":"json:","text":"","category":"section"},{"location":"#","page":"Dashboards","title":"Dashboards","text":"I use JSON2 for json serialization/deserialization, so in callbacks all json objects are NamedTuples not Dicts. In component props you can use both Dicts and NamedTuples for json objects. But be careful with single property objects: layout = (title = \"Test graph\") is not interpreted as NamedTuple by Julia  - you need add comma at the end layout = (title = \"Test graph\",)","category":"page"}]
}
