version: 2

jobs:

  test:
    working_directory: ~/dashjl 
    docker:
      - image: plotly/julia:ci 
        environment:
          PERCY_PARALLEL_TOTAL: '-1'
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'True'
 
    steps:
      - checkout

      - run:
          name: ‚ÑπÔ∏è  CI Context
          command: |
            echo "TRIGGERER: ${CIRCLE_USERNAME}"
            echo "BUILD_NUMBER: ${CIRCLE_BUILD_NUM}"
            echo "BUILD_URL: ${CIRCLE_BUILD_URL}"
            echo "BRANCH: ${CIRCLE_BRANCH}"
            echo "RUNNING JOB: ${CIRCLE_JOB}"
            echo "JOB PARALLELISM: ${CIRCLE_NODE_TOTAL}"
            echo "CIRCLE_REPOSITORY_URL: ${CIRCLE_REPOSITORY_URL}"
            echo $CIRCLE_JOB > circlejob.txt

      - run:
          name: üîé Unit tests
          command: |
            julia -e 'using Pkg; Pkg.update(); Pkg.add(PackageSpec(url="https://github.com/plotly/Dash.jl.git", rev=ENV["CIRCLE_BRANCH"])); Pkg.add(PackageSpec(url="https://github.com/waralex/dash-html-components.git", rev="jl_generator_test")); Pkg.add(PackageSpec(url="https://github.com/waralex/dash-core-components.git", rev="jl_generator_test")); Pkg.build("Dash"); Pkg.build("DashHtmlComponents"); Pkg.build("DashCoreComponents"); Pkg.test("Dash", coverage=true); function precompile_pkgs(); for pkg in collect(keys(Pkg.installed())); if !isdefined(Symbol(pkg), :Symbol) && pkg != "Compat.jl"; @info("Importing $(pkg)..."); try (@eval import $(Symbol(pkg))) catch end; end; end; end; precompile_pkgs()'

      - run:
          name: ‚öôÔ∏è  Integration tests
          command: |
            python -m venv venv
            . venv/bin/activate
            git clone --depth 1 https://github.com/plotly/dash.git -b add-julia-runner dash-main
            cd dash-main && pip install -e .[dev,testing] --progress-bar off && cd ~/dashjl 
            export PATH=$PATH:/home/circleci/.local/bin/
            pytest --headless --nopercyfinalize --junitxml=test-reports/dashjl.xml --percy-assets=test/assets/ test/integration/
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts

      - run:
          name: ü¶î percy finalize
          command: npx percy finalize --all
          when: always

workflows:
  version: 2
  build:
    jobs:
      - "test"
